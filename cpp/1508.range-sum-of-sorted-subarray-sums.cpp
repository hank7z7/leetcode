/*
 * @lc app=leetcode id=1508 lang=cpp
 *
 * [1508] Range Sum of Sorted Subarray Sums
 *
 * https://leetcode.com/problems/range-sum-of-sorted-subarray-sums/description/
 *
 * algorithms
 * Medium (58.42%)
 * Likes:    1129
 * Dislikes: 202
 * Total Accepted:    78.5K
 * Total Submissions: 128.3K
 * Testcase Example:  '[1,2,3,4]\n4\n1\n5'
 *
 * You are given the array nums consisting of n positive integers. You computed
 * the sum of all non-empty continuous subarrays from the array and then sorted
 * them in non-decreasing order, creating a new array of n * (n + 1) / 2
 * numbers.
 *
 * Return the sum of the numbers from index left to index right (indexed from
 * 1), inclusive, in the new array. Since the answer can be a huge number
 * return it modulo 10^9 + 7.
 *
 *
 * Example 1:
 *
 *
 * Input: nums = [1,2,3,4], n = 4, left = 1, right = 5
 * Output: 13
 * Explanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After
 * sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4,
 * 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2
 * + 3 + 3 + 4 = 13.
 *
 *
 * Example 2:
 *
 *
 * Input: nums = [1,2,3,4], n = 4, left = 3, right = 4
 * Output: 6
 * Explanation: The given array is the same as example 1. We have the new array
 * [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to
 * ri = 4 is 3 + 3 = 6.
 *
 *
 * Example 3:
 *
 *
 * Input: nums = [1,2,3,4], n = 4, left = 1, right = 10
 * Output: 50
 *
 *
 *
 * Constraints:
 *
 *
 * n == nums.length
 * 1 <= nums.length <= 1000
 * 1 <= nums[i] <= 100
 * 1 <= left <= right <= n * (n + 1) / 2
 *
 *
 */
#include <bits/stdc++.h>
using namespace std;
// @lc code=start
class Solution
{
public:
    int rangeSum(vector<int> &nums, int n, int left, int right)
    {
        for (int i = 1; i < n; i++)
            nums[i] += nums[i - 1];

        priority_queue<int> pq;
        for (int i = 0; i < n; i++)
        {
            for (int j = i; j < n; j++)
            {
                int prev = (i - 1) >= 0 ? nums[i - 1] : 0;
                pq.push(nums[j] - prev);
                if ((int)pq.size() > right)
                    pq.pop();
            }
        }

        int res = 0;
        for (int i = right; i >= left; i--)
        {
            res += pq.top();
            res = res % (1000000007);
            pq.pop();
        }
        return res;
    }
};
// @lc code=end
int main(int argc, char **argv)
{
    Solution sol;
    // Test_1
    vector<int> nums_1 = {1, 2, 3, 4};
    int n_1 = 4;
    int l_1 = 1;
    int r_1 = 5;
    int res_1 = sol.rangeSum(nums_1, n_1, l_1, r_1);
    cout << res_1 << endl;
    assert(res_1 == 13);

    // Test_2
    vector<int> nums_2 = {1, 2, 3, 4};
    int n_2 = 4;
    int l_2 = 3;
    int r_2 = 4;
    int res_2 = sol.rangeSum(nums_2, n_2, l_2, r_2);
    cout << res_2 << endl;
    assert(res_2 == 6);

    // Test_3
    vector<int> nums_3 = {1, 2, 3, 4};
    int n_3 = 4;
    int l_3 = 1;
    int r_3 = 10;
    int res_3 = sol.rangeSum(nums_3, n_3, l_3, r_3);
    cout << res_3 << endl;
    assert(res_3 == 50);

    // Test_4
    vector<int> nums_4 = {};
    int n_4 = 1000;
    int l_4 = 1;
    int r_4 = 500500;
    int res_4 = sol.rangeSum(nums_4, n_4, l_4, r_4);
    cout << res_4 << endl;
    assert(res_4 == 716699888);

    return 0;
}
// Accepted
// 54/54 cases passed (215 ms)
// Your runtime beats 8.99 % of cpp submissions
// Your memory usage beats 75.51 % of cpp submissions (16 MB)